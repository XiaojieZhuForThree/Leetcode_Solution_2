#include <vector>
#include <unordered_set>
#include <queue>
#include <unordered_map>
using std::vector;

class Solution {
public:
	vector<int> findAllPeople(int n, vector<vector<int>>& meetings, int firstPerson) {
		std::unordered_set<int> ppl;
		vector<int> ans;
		ppl.insert(0);
		std::priority_queue<std::pair<int, int>, vector<std::pair<int, int>>, std::greater<std::pair<int, int>>> pq;
		std::unordered_map<int, vector<std::pair<int, int>>> m;
		for (auto& mt : meetings) {
			m[mt[0]].push_back({ mt[2], mt[1] });
			m[mt[1]].push_back({ mt[2], mt[0] });
		}
		for (auto& p : m[0]) {
			pq.push(p);
		}
		pq.push({ 0, firstPerson });
		while (!pq.empty()) {
			auto cur = pq.top();
			pq.pop();
			if (ppl.count(cur.second)) continue;
			for (auto& p : m[cur.second]) {
				if (p.first < cur.first) continue;
				pq.push(p);
			}
			ppl.insert(cur.second);
		}
		for (int i : ppl) ans.push_back(i);
		return ans;
	}
};
