#include <vector>
#include <algorithm>
using std::vector;

class Solution {
public:
    int smallestDistancePair(vector<int>& nums, int k) {
        sort(nums.begin(), nums.end());
        int l = 0, n = nums.size(), r = nums[n - 1] - nums[0];
        while (r - l > 1) {
            int m = l + (r - l) / 2;
            if (position(nums, m) >= k) {
                r = m;
            }
            else {
                l = m;
            }
        }
        if (position(nums, l) >= k) {
            return l;
        }
        else if (position(nums, r) >= k) {
            return r;
        }
        return 0;
    }
private:
    int position(vector<int>& nums, int m) {
        int ans = 0;
        for (int i = 0; i < nums.size() - 1; ++i) {
            int index = upper_bound(nums.begin(), nums.end(), nums[i] + m) - nums.begin();
            ans += (index - 1 - i);
        }
        return ans;
    }
};
