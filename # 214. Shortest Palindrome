#include <string>
#include <vector>
using std::string;

class Solution {
public:
    string shortestPalindrome(string s) {
        string rev_s = s;
        reverse(rev_s.begin(), rev_s.end());

        string new_s = s + "#" + rev_s;

        std::vector<int> lps(new_s.size(), 0);

        for (int i = 1; i < new_s.size(); i++) {
            int j = lps[i - 1];
            while (j > 0 && new_s[i] != new_s[j]) {
                j = lps[j - 1];
            }
            if (new_s[i] == new_s[j]) {
                j++;
            }
            lps[i] = j;
        }
        string to_add = s.substr(lps.back());
        reverse(to_add.begin(), to_add.end());
        return to_add + s;
    }
};


class Solution {
public:
    string shortestPalindrome(string s) {
        if (size(s) <= 1) return s;
        string t = string(1, s[0]);
        for (int i = 1; i < size(s); i++) {
            t += '#';
            t += s[i];
        }
        vector<int> v(size(t));
        int c = -1, r = 0, l = 0;
        for (int i = 0; i < size(t); i++) {
            int nr = 0;
            if (i < r) {
                int j = 2 * c - i;
                nr = min(v[j], r - j);
            }
            while (i - nr >= 0 && i + nr < size(t) && t[i - nr] == t[i + nr]) nr++;
            nr--;
            v[i] = nr;
            if (i + nr > r) {
                r = i + nr;
                c = i;
            }
            if (i - v[i] == 0) l = max(l, v[i]);
        }
        string rem = s.substr(l + 1);
        reverse(rem.begin(), rem.end());
        return rem + s.substr(0, l + 1) + s.substr(l + 1);
    }
};
