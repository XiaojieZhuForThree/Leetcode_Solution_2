#include <vector>
#include <map>
#include <algorithm>
using std::vector;

struct Schedule {
	int s;
	int e;
	int p;
	Schedule(int ss, int ee, int pp) {
		s = ss;
		e = ee;
		p = pp;
	}
};
struct Comparator {
	bool operator() (Schedule& a, Schedule& b) {
		return a.e < b.e;
	}
};
class Solution {
public:
	int jobScheduling(vector<int>& startTime, vector<int>& endTime, vector<int>& profit) {
		vector<Schedule> v;
		std::map<int, int> dp;
		int now = 0;
		for (int i = 0; i < size(startTime); i++) {
			v.push_back(Schedule(startTime[i], endTime[i], profit[i]));
		}
		sort(v.begin(), v.end(), Comparator());
		for (auto& s : v) {
			int ans = s.p;
			auto it = dp.upper_bound(s.s);
			if (it != dp.begin()) {
				it--;
				ans += it->second;
			}
			now = std::max(now, ans);
			dp[s.e] = now;
		}
		return now;
	}
};
