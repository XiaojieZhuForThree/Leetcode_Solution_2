#include <vector>
using std::vector;

class Solution {
public:
    int maxMoves(vector<vector<int>>& grid) {
        int m = size(grid), n = size(grid[0]);
        vector<vector<int>> dp(m, vector<int>(n, 0));
        for (int i = 0; i < m; i++) {
            if (grid[i][0] < grid[i][1]) dp[i][1] = 1 + dp[i][0];
            if (i - 1 >= 0 && grid[i - 1][0] < grid[i][1]) dp[i][1] = std::max(dp[i][1], 1 + dp[i - 1][0]);
            if (i + 1 < m && grid[i + 1][0] < grid[i][1]) dp[i][1] = std::max(dp[i][1], 1 + dp[i + 1][0]);
        }
        for (int j = 2; j < n; j++) {
            for (int i = 0; i < m; i++) {
                if (grid[i][j - 1] < grid[i][j] && dp[i][j - 1] > 0) dp[i][j] = 1 + dp[i][j - 1];
                if (i - 1 >= 0 && grid[i - 1][j - 1] < grid[i][j] && dp[i - 1][j - 1] > 0) dp[i][j] = std::max(dp[i][j], 1 + dp[i - 1][j - 1]);
                if (i + 1 < m && grid[i + 1][j - 1] < grid[i][j] && dp[i + 1][j - 1] > 0) dp[i][j] = std::max(dp[i][j], 1 + dp[i + 1][j - 1]);
            }
        }
        int ans = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) ans = std::max(ans, dp[i][j]);
        }
        return ans;
    }
};
