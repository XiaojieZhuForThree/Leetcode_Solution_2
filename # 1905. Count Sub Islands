#include <vector>
using std::vector;

class Solution {
public:
    int countSubIslands(vector<vector<int>>& grid1, vector<vector<int>>& grid2) {
        int m = size(grid2), n = size(grid2[0]);
        int ans = 0;
        vector<std::pair<int, int>> dir = { {1, 0}, {-1, 0}, {0, 1}, {0, -1} };
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid2[i][j]) {
                    if (dfs(grid1, grid2, dir, i, j)) ans++;
                }
            }
        }
        return ans;
    }

private:
    bool dfs(vector<vector<int>>& grid1, vector<vector<int>>& grid2, vector<std::pair<int, int>>& dir, int i, int j) {
        int m = size(grid2), n = size(grid2[0]);
        if (i < 0 || i >= m || j < 0 || j >= n || grid2[i][j] == 0) return true;
        grid2[i][j] = 0;
        bool ans = grid1[i][j] == 1;
        for (auto& p : dir) ans &= dfs(grid1, grid2, dir, i + p.first, j + p.second);
        return ans;
    }
};
