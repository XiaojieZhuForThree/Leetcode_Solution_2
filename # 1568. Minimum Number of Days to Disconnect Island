#include <vector>
using std::vector;

class Solution {
private:
    int time;
    vector<vector<int>> discoveryTime;
    vector<vector<int>> lowestReachableTime;
    const vector<std::pair<int, int>> DIRS = { {0, 1}, {1, 0}, {0, -1}, {-1, 0} };
    bool hasArticulationPoint;
    int totalLandCells;

    void dfs(int row, int col, vector<vector<int>>& grid, int parentRow, int parentCol) {
        discoveryTime[row][col] = time;
        lowestReachableTime[row][col] = time;
        time++;
        totalLandCells++;
        int children = 0;

        for (const auto& dir : DIRS) {
            int newRow = row + dir.first;
            int newCol = col + dir.second;

            if (!isValidCell(newRow, newCol, grid)) continue;

            if (discoveryTime[newRow][newCol] == 0) {
                children++;
                dfs(newRow, newCol, grid, row, col);
                lowestReachableTime[row][col] = std::min(lowestReachableTime[row][col], lowestReachableTime[newRow][newCol]);

                if (lowestReachableTime[newRow][newCol] >= discoveryTime[row][col] && parentRow != -1) hasArticulationPoint = true;
            }
            else if ((newRow != parentRow || newCol != parentCol) && discoveryTime[newRow][newCol] < discoveryTime[row][col]) {
                lowestReachableTime[row][col] = std::min(lowestReachableTime[row][col], discoveryTime[newRow][newCol]);
            }
        }

        if (parentRow == -1 && children > 1) {
            hasArticulationPoint = true;
        }
    }

    bool isValidCell(int row, int col, const vector<vector<int>>& grid) {
        return row >= 0 && col >= 0 && row < grid.size() && col < grid[0].size() && grid[row][col] == 1;
    }

public:
    int minDays(vector<vector<int>>& grid) {
        int rows = grid.size(), cols = grid[0].size();
        discoveryTime = vector<vector<int>>(rows, vector<int>(cols, 0));
        lowestReachableTime = vector<vector<int>>(rows, vector<int>(cols, 0));
        time = 1;
        hasArticulationPoint = false;
        totalLandCells = 0;
        int islands = 0;

        for (int row = 0; row < rows; row++) {
            for (int col = 0; col < cols; col++) {
                if (grid[row][col] == 1 && discoveryTime[row][col] == 0) {
                    islands++;
                    if (islands > 1) return 0;
                    dfs(row, col, grid, -1, -1);
                }
            }
        }

        if (totalLandCells == 0) return 0;
        if (totalLandCells == 1) return 1;
        if (islands == 0) return 0;
        return hasArticulationPoint ? 1 : 2;
    }
};
