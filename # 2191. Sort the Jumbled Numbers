#include <vector>
#include <unordered_map>
#include <algorithm>
#include <deque>
using std::vector;

class Solution {
public:
    vector<int> sortJumbled(vector<int>& mapping, vector<int>& nums) {
        vector<int> idx;
        std::unordered_map<int, int> m;
        for (int i : nums) m[i] = helper(i, mapping);
        for (int i = 0; i < size(nums); i++) idx.push_back(i);
        sort(idx.begin(), idx.end(), [&nums, &m](int i, int j) {
            if (m[nums[i]] == m[nums[j]]) return i < j;
            return m[nums[i]] < m[nums[j]];
            });
        vector<int> ans;
        for (int i : idx) ans.push_back(nums[i]);
        return ans;
    }
private:
    static int helper(int i, vector<int>& mapping) {
        if (i == 0) return mapping[i];
        int ans = 0;
        std::deque<int> q;
        while (i > 0) {
            q.push_back(mapping[i % 10]);
            i /= 10;
        }
        while (!q.empty()) {
            ans *= 10;
            int cur = q.back();
            q.pop_back();
            ans += cur;
        }
        return ans;
    }
};
