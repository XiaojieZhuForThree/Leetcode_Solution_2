#include <vector>
using std::vector;

class Solution {
public:
    bool primeSubOperation(vector<int>& nums) {
        vector<int> primes = helper(1000);
        for (int i = size(nums) - 2; i >= 0; i--) {
            if (nums[i] < nums[i + 1]) continue;
            int l = 0, r = size(primes) - 1;
            while (l < r) {
                int m = l + (r - l) / 2;
                if (nums[i] > primes[m] && nums[i] - primes[m] >= nums[i + 1]) l = m + 1;
                else r = m;
            }
            if (nums[i] <= primes[l] || nums[i] - primes[l] >= nums[i + 1]) return false;
            nums[i] -= primes[l];
        }
        return true;
    }
private:
    vector<int> helper(int n) {
        vector<bool> v(n + 1, true);
        for (int i = 2; i <= n; i++) {
            if (v[i] == false) continue;
            for (int j = 2; j * i <= n; j++) v[j * i] = false;
        }
        vector<int> ans;
        for (int i = 2; i <= n; i++) {
            if (v[i]) ans.push_back(i);
        }
        return ans;
    }
};
