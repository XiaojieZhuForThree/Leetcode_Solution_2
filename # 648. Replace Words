#include <string>
#include <vector>
using std::string;
using std::vector;

struct Trie {
    bool end;
    Trie* nxt[26];
};

class Solution {
public:
    string replaceWords(vector<string>& dictionary, string sentence) {
        Trie* t = new Trie();
        for (auto& s : dictionary) {
            Trie* ptr = t;
            for (char c : s) {
                if (!ptr->nxt[c - 'a']) ptr->nxt[c - 'a'] = new Trie();
                ptr = ptr->nxt[c - 'a'];
            }
            ptr->end = true;
        }
        string ans;
        int l = 0, r = 0;
        while (r < size(sentence)) {
            if (sentence[r] == ' ') {
                ans += helper(t, sentence.substr(l, r - l));
                ans += ' ';
                l = r + 1;
            }
            r++;
        }
        if (l < size(sentence)) ans += helper(t, sentence.substr(l, r - l));
        return ans;
    }

private:
    string helper(Trie* t, string s) {
        Trie* ptr = t;
        bool found = false;
        for (int i = 0; i < size(s); i++) {
            if (ptr->end) return s.substr(0, i);
            else if (!ptr->nxt[s[i] - 'a']) break;
            else ptr = ptr->nxt[s[i] - 'a'];
        }
        return s;
    }
};
